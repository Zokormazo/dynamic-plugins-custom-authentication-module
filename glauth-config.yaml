apiVersion: v1
data:
  sample-simple: "#################\n# glauth.conf\n\n#################\n# General
    configuration.\ndebug = true\n# syslog = true\n# structuredlog = true\n#\n# Enable
    hot-reload of configuration on changes\n# - does NOT work [ldap], [ldaps], [backend]
    or [api] sections\n# watchconfig = true\n\n#################\n# yubikeyclientid
    = \"yubi-api-clientid\"\n# yubikeysecret = \"yubi-api-secret\"\n\n#################\n#
    Server configuration.\n[ldap]\n  enabled = true\n  # run on a non privileged port\n
    \ listen = \"0.0.0.0:3893\"\n  tls = false # enable StartTLS support\n  tlsCertPath
    = \"glauth.crt\"\n  tlsKeyPath = \"glauth.key\"\n\n[ldaps]\n# to enable ldaps
    generate a certificate, eg. with:\n# openssl req -x509 -newkey rsa:4096 -keyout
    glauth.key -out glauth.crt -days 365 -nodes -subj '/CN=`hostname`'\n  enabled
    = false\n  listen = \"0.0.0.0:3894\"\n  cert = \"glauth.crt\"\n  key = \"glauth.key\"\n\n#################\n#
    Tracing section controls the tracer configuration\n[tracing]\n  # if enabled is
    set to false, a no-op tracer will be used\n  enabled = false\n  # if both grpcEndpoint
    and httpEndpoint are unset, the default stdout provider will be used\n  # TODO
    add allowGRPCInsecure: right now grpc otlp is using the WithInsecure flag so traffic\n
    \ # will always go without verifying server certificates\n  # grpcEndpoint = \"otlp.monitoring.io:4317\"\n
    \ # httpEndpoint = \"http://otlp.monitoring.io:4318\"\n#################\n# The
    backend section controls the data store.\n[backend]\n  datastore = \"config\"\n
    \ baseDN = \"dc=glauth,dc=com\"\n\n  # If you are using a client that requires
    reading the root DSE first\n  # such as SSSD\n  anonymousdse = false\n\n  ## Configure
    dn format to use structures like \n  ## \"uid=serviceuser,cn=svcaccts,$BASEDN\"
    instead of \"cn=serviceuser,ou=svcaccts,$BASEDN\"\n  ## to help ease migrations
    from other LDAP systems\n  # nameformat = \"uid\"\n  # groupformat = \"cn\"\n\n
    \ ## Configure ssh-key attribute name, default is 'sshPublicKey'\n  # sshkeyattr
    = \"ipaSshPubKey\"\n\n[behaviors]\n  # Ignore all capabilities restrictions, for
    instance allowing every user to perform a search\n  IgnoreCapabilities = false\n
    \ # Enable a \"fail2ban\" type backoff mechanism temporarily banning repeated
    failed login attempts\n  LimitFailedBinds = true\n  # How many failed login attempts
    are allowed before a ban is imposed\n  NumberOfFailedBinds = 3\n  # How long (in
    seconds) is the window for failed login attempts\n  PeriodOfFailedBinds = 10\n
    \ # How long (in seconds) is the ban duration\n  BlockFailedBindsFor = 60\n  #
    Clean learnt IP addresses every N seconds\n  PruneSourceTableEvery = 600\n  #
    Clean learnt IP addresses not seen in N seconds\n  PruneSourcesOlderThan = 600\n\n#################\n#
    The users section contains a hardcoded list of valid users.\n#   to create a passSHA256:
    \  echo -n \"mysecret\" | openssl dgst -sha256\n[[users]]\n  name = \"hackers\"\n
    \ uidnumber = 5001\n  primarygroup = 5501\n  passsha256 = \"6478579e37aff45f013e14eeb30b3cc56c72ccdc310123bcdf53e0333e3f416a\"
    # dogood\n    [[users.customattributes]]\n    employeetype = [\"Intern\", \"Temp\"]\n
    \   employeenumber = [12345, 54321]\n    [[users.capabilities]]\n    action =
    \"search\"\n    object = \"ou=superheros,dc=glauth,dc=com\"\n\n# This user record
    shows all of the possible fields available\n[[users]]\n  name = \"johndoe\"\n
    \ givenname=\"John\"\n  sn=\"Doe\"\n  mail = \"jdoe@example.com\"\n  uidnumber
    = 5002\n  primarygroup = 5501\n  loginShell = \"/bin/sh\"\n  homeDir = \"/root\"\n
    \ passsha256 = \"6478579e37aff45f013e14eeb30b3cc56c72ccdc310123bcdf53e0333e3f416a\"
    # dogood\n  sshkeys = [\"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA3UKCEllO2IZXgqNygiVb+dDLJJwVw3AJwV34t2jzR+/tUNVeJ9XddKpYQektNHsFmY93lJw5QDSbeH/mAC4KPoUM47EriINKEelRbyG4hC/ko/e2JWqEclPS9LP7GtqGmscXXo4JFkqnKw4TIRD52XI9n1syYM9Y8rJ88fjC/Lpn+01AB0paLVIfppJU35t0Ho9doHAEfEvcQA6tcm7FLJUvklAxc8WUbdziczbRV40KzDroIkXAZRjX7vXXhh/p7XBYnA0GO8oTa2VY4dTQSeDAUJSUxbzevbL0ll9Gi1uYaTDQyE5gbn2NfJSqq0OYA+3eyGtIVjFYZgi+txSuhw==
    rsa-key-20160209\"]\n  passappsha256 = [\n    \"c32255dbf6fd6b64883ec8801f793bccfa2a860f2b1ae1315cd95cdac1338efa\",
    # TestAppPw1\n    \"c9853d5f2599e90497e9f8cc671bd2022b0fb5d1bd7cfff92f079e8f8f02b8d3\",
    # TestAppPw2\n    \"4939efa7c87095dacb5e7e8b8cfb3a660fa1f5edcc9108f6d7ec20ea4d6b3a88\",
    # TestAppPw3\n  ]\n\n[[users]]\n  name = \"serviceuser\"\n  mail = \"serviceuser@example.com\"\n
    \ uidnumber = 5003\n  primarygroup = 5502\n  passsha256 = \"652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0\"
    # mysecret\n    [[users.capabilities]]\n    action = \"search\"\n    object =
    \"*\"\n\n# Test user showing 2 factor auth authentication\n[[users]]\n  name =
    \"otpuser\"\n  uidnumber = 5004\n  primarygroup = 5501\n  passsha256 = \"652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0\"
    # mysecret\n  otpsecret = \"3hnvnk4ycv44glzigd6s25j4dougs3rk\"\n  yubikey = \"vvjrcfalhlaa\"\n
    \   [[users.capabilities]]\n    action = \"search\"\n    object = \"ou=superheros,dc=glauth,dc=com\"\n\n[[users]]\n
    \ name = \"uberhackers\"\n  uidnumber = 5005\n  primarygroup = 5501\n  # bcrypt
    format: hex($2y$2^<number of rounds>$<salt>$<hash>)\n  passappbcrypt = [\n    \"243261243130244B62463462656F7265504F762E794F324957746D656541326B4B46596275674A79336A476845764B616D65446169784E41384F4432\"
    # dogood\n  ]\n  # uncomment and comment out above array to test password with
    otp code\n  # passappbcrypt = \"243261243130244B62463462656F7265504F762E794F324957746D656541326B4B46596275674A79336A476845764B616D65446169784E41384F4432\"
    # dogood\n  otpsecret = \"3hnvnk4ycv44glzigd6s25j4dougs3rk\"\n\n[[users]]\n  name
    = \"danger\"\n  uidnumber = 5006\n  primarygroup = 5503\n  passsha256 = \"6478579e37aff45f013e14eeb30b3cc56c72ccdc310123bcdf53e0333e3f416a\"
    # dogood\n\n#################\n# The groups section contains a hardcoded list
    of valid users.\n[[groups]]\n  name = \"superheros\"\n  gidnumber = 5501\n\n[[groups]]\n
    \ name = \"svcaccts\"\n  gidnumber = 5502\n\n[[groups]]\n  name = \"umbrella\"\n
    \ gidnumber = 5503\n  includegroups = [ 5504 ]\n\n[[groups]]\n  name = \"danger\"\n
    \ gidnumber = 5504\n    [[groups.capabilities]]\n    action = \"search\"\n    object
    = \"dc=glauth,dc=com\"\n\n#################\n# Enable and configure the optional
    REST API here.\n[api]\n  enabled = true\n  internals = true # debug application
    performance\n  tls = false # enable TLS for production!!\n  listen = \"0.0.0.0:5555\"\n
    \ cert = \"cert.pem\"\n  key = \"key.pem\"\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: glauth-config
